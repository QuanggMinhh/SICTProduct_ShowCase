// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SICT_ShowCaseContext))]
    [Migration("20250427105156_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "AI",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2176),
                            Description = "Artificial Intelligence",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2176)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Blockchain",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2178),
                            Description = "Blockchain tech",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2178)
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Cloud",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2180),
                            Description = "Cloud computing",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2180)
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "IoT",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2181),
                            Description = "Internet of Things",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2182)
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Cybersecurity",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2183),
                            Description = "Security",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2183)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("RejectReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2235),
                            Description = "AI chatbot",
                            Image = "",
                            Level = "Advanced",
                            ManagerId = 1,
                            RejectReason = "Incomplete features",
                            Status = "Approved",
                            Title = "AI Assistant",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2236),
                            View = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2270),
                            Description = "Crypto wallet",
                            Image = "",
                            Level = "Intermediate",
                            ManagerId = 2,
                            RejectReason = "Incomplete features",
                            Status = "Pending",
                            Title = "Blockchain Wallet",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2271),
                            View = 50
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2273),
                            Description = "Secure cloud",
                            Image = "",
                            Level = "Basic",
                            ManagerId = 3,
                            RejectReason = "Incomplete features",
                            Status = "Approved",
                            Title = "Cloud Storage",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2273),
                            View = 75
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2275),
                            Description = "Smart sensors",
                            Image = "",
                            Level = "Advanced",
                            ManagerId = 4,
                            RejectReason = "Incomplete features",
                            Status = "Rejected",
                            Title = "Smart IoT Sensor",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2276),
                            View = 30
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2277),
                            Description = "Security app",
                            Image = "",
                            Level = "Intermediate",
                            ManagerId = 5,
                            RejectReason = "Incomplete features",
                            Status = "Approved",
                            Title = "Cyber Shield",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2278),
                            View = 90
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2000),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2013)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2014),
                            RoleName = "Contributor",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2015)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2206),
                            Name = "Machine Learning",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2206)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2208),
                            Name = "NFT",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2208)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2209),
                            Name = "AWS",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2210)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2211),
                            Name = "Smart Home",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2211)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2212),
                            Name = "Data Protection",
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2213)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("UploadFile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "application/pdf",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2321),
                            Data = new byte[0],
                            FileName = "ai_doc.pdf",
                            ProductId = 1,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2322)
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "application/pdf",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2323),
                            Data = new byte[0],
                            FileName = "wallet_doc.pdf",
                            ProductId = 2,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2324)
                        },
                        new
                        {
                            Id = 3,
                            ContentType = "application/pdf",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2325),
                            Data = new byte[0],
                            FileName = "cloud_doc.pdf",
                            ProductId = 3,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2326)
                        },
                        new
                        {
                            Id = 4,
                            ContentType = "application/pdf",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2327),
                            Data = new byte[0],
                            FileName = "iot_doc.pdf",
                            ProductId = 4,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2327)
                        },
                        new
                        {
                            Id = 5,
                            ContentType = "application/pdf",
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2329),
                            Data = new byte[0],
                            FileName = "cyber_doc.pdf",
                            ProductId = 5,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2329)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2144),
                            Email = "admin1@example.com",
                            Password = "hashed_pwd",
                            RoleId = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2145),
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2147),
                            Email = "user1@example.com",
                            Password = "hashed_pwd",
                            RoleId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2147),
                            UserName = "contributor1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2149),
                            Email = "user2@example.com",
                            Password = "hashed_pwd",
                            RoleId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2149),
                            UserName = "contributor2"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2150),
                            Email = "user3@example.com",
                            Password = "hashed_pwd",
                            RoleId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2151),
                            UserName = "contributor3"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2152),
                            Email = "user4@example.com",
                            Password = "hashed_pwd",
                            RoleId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 27, 17, 51, 55, 389, DateTimeKind.Local).AddTicks(2153),
                            UserName = "contributor4"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ProductTag", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.UploadFile", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("UploadFiles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("UploadFiles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}

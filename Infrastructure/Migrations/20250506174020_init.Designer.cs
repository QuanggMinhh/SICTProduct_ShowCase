// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SICT_ShowCaseContext))]
    [Migration("20250506174020_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Author", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicTitle = "GS",
                            AvatarUrl = "/images/author1.jpg",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6740),
                            Degree = "TS",
                            Email = "nguyenvana@example.com",
                            FullName = "Nguyễn Văn A",
                            IsStudent = false,
                            PhoneNumber = "0901234567",
                            Position = "Giảng viên",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6740)
                        },
                        new
                        {
                            Id = 2,
                            AcademicTitle = "PGS",
                            AvatarUrl = "/images/author2.jpg",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6742),
                            Degree = "ThS",
                            Email = "tranthib@example.com",
                            FullName = "Trần Thị B",
                            IsStudent = false,
                            PhoneNumber = "0902345678",
                            Position = "Giảng viên",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6743)
                        },
                        new
                        {
                            Id = 3,
                            AcademicTitle = "",
                            AvatarUrl = "/images/author3.jpg",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6744),
                            Degree = "CN",
                            Email = "levanc@example.com",
                            FullName = "Lê Văn C",
                            IsStudent = true,
                            PhoneNumber = "0913456789",
                            Position = "Sinh viên",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6745)
                        },
                        new
                        {
                            Id = 4,
                            AcademicTitle = "",
                            AvatarUrl = "/images/author4.jpg",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6746),
                            Degree = "ThS",
                            Email = "phamthid@example.com",
                            FullName = "Phạm Thị D",
                            IsStudent = true,
                            PhoneNumber = "0934567890",
                            Position = "Nghiên cứu sinh",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6747)
                        },
                        new
                        {
                            Id = 5,
                            AcademicTitle = "",
                            AvatarUrl = "/images/author5.jpg",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6748),
                            Degree = "CN",
                            Email = "dovane@example.com",
                            FullName = "Đỗ Văn E",
                            IsStudent = true,
                            PhoneNumber = "0987654321",
                            Position = "Sinh viên",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6749)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Khoa học máy tính",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6512),
                            Description = "Lĩnh vực CNTT",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6513)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Trí tuệ nhân tạo",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6514),
                            Description = "AI và Machine Learning",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6514)
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Kỹ thuật phần mềm",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6516),
                            Description = "Thiết kế và phát triển phần mềm",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6516)
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "An toàn thông tin",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6517),
                            Description = "Bảo mật hệ thống",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6517)
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Hệ thống thông tin",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6518),
                            Description = "Phân tích và quản lý thông tin",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6519)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6612),
                            Description = "Ứng dụng quản lý sách, mượn-trả",
                            Image = "library.png",
                            Level = "Đại học",
                            ManagerId = 1,
                            Status = "Đã duyệt",
                            Title = "Hệ thống quản lý thư viện",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6613),
                            View = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6615),
                            Description = "Dự án ứng dụng OpenCV và Python",
                            Image = "face_ai.png",
                            Level = "Thạc sĩ",
                            ManagerId = 2,
                            Status = "Chờ duyệt",
                            Title = "Nhận diện khuôn mặt bằng AI",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6616),
                            View = 75
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6618),
                            Description = "Thống kê, khai thác dữ liệu truy cập",
                            Image = "analytics.png",
                            Level = "Đại học",
                            ManagerId = 3,
                            RejectReason = "Thiếu dữ liệu thực nghiệm",
                            Status = "Bị từ chối",
                            Title = "Phân tích hành vi người dùng Web",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6618),
                            View = 30
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6620),
                            Description = "Quản lý chứng chỉ học tập minh bạch",
                            Image = "blockchain.png",
                            Level = "Tiến sĩ",
                            ManagerId = 4,
                            Status = "Đã duyệt",
                            Title = "Ứng dụng Blockchain trong giáo dục",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6621),
                            View = 55
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6623),
                            Description = "Sử dụng Machine Learning phát hiện tấn công",
                            Image = "ids.png",
                            Level = "Thạc sĩ",
                            ManagerId = 5,
                            Status = "Chờ duyệt",
                            Title = "Hệ thống cảnh báo xâm nhập mạng",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6623),
                            View = 90
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductAuthor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("ProductAuthor", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            AuthorId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            AuthorId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            AuthorId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            AuthorId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            AuthorId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6309),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6327)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6328),
                            RoleName = "Manager",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6329)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6541),
                            Name = "Trí tuệ nhân tạo",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6542)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6545),
                            Name = "Học máy",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6545)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6547),
                            Name = "An ninh mạng",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6547)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6548),
                            Name = "Cơ sở dữ liệu",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6548)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6549),
                            Name = "Phát triển Web",
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6550)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("UploadFile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "application/pdf",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6698),
                            Data = new byte[] { 1, 2, 3 },
                            FileName = "thu-vien.pdf",
                            ProductId = 1,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6699)
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6703),
                            Data = new byte[] { 4, 5, 6 },
                            FileName = "ai-project.docx",
                            ProductId = 2,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6703)
                        },
                        new
                        {
                            Id = 3,
                            ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6706),
                            Data = new byte[] { 7, 8, 9 },
                            FileName = "phan-tich-web.xlsx",
                            ProductId = 3,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6706)
                        },
                        new
                        {
                            Id = 4,
                            ContentType = "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6709),
                            Data = new byte[] { 10, 11, 12 },
                            FileName = "blockchain.pptx",
                            ProductId = 4,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6709)
                        },
                        new
                        {
                            Id = 5,
                            ContentType = "application/pdf",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6711),
                            Data = new byte[] { 13, 14, 15 },
                            FileName = "bao-mat.pdf",
                            ProductId = 5,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6712)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6478),
                            Email = "admin1@example.com",
                            Password = "admin123",
                            RoleId = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6479),
                            UserName = "admin01"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6481),
                            Email = "manager1@example.com",
                            Password = "manager123",
                            RoleId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6481),
                            UserName = "manager01"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6483),
                            Email = "admin2@example.com",
                            Password = "admin456",
                            RoleId = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6483),
                            UserName = "admin02"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6484),
                            Email = "manager2@example.com",
                            Password = "manager456",
                            RoleId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6485),
                            UserName = "manager02"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6486),
                            Email = "admin3@example.com",
                            Password = "admin789",
                            RoleId = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 5, 7, 0, 40, 20, 430, DateTimeKind.Local).AddTicks(6486),
                            UserName = "admin03"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ProductAuthor", b =>
                {
                    b.HasOne("Domain.Entities.Author", "Author")
                        .WithMany("ProductAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductAuthors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductTag", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.UploadFile", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("UploadFiles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Navigation("ProductAuthors");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductAuthors");

                    b.Navigation("ProductTags");

                    b.Navigation("UploadFiles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
